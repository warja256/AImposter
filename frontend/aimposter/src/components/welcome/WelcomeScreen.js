import React, { useState, useEffect } from "react";
import { useNavigate } from 'react-router-dom';
import "./WelcomeScreen.css";
import "../header.css";
import logo from "../../assets/images/logo.png";
import avatar from "../../assets/images/avatar.png";
import { createRoom, joinRoom } from "../../api/room_api.js";  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API —Ñ—É–Ω–∫—Ü–∏–∏
import socket from "../../config/socket";


const WelcomeScreen = () => {
  const [currentSlide, setCurrentSlide] = useState(0);
  const [isManual, setIsManual] = useState(false);
  const [playerName, setPlayerName] = useState(""); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
  const [roomCode, setRoomCode] = useState(""); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã
  const [token, setToken] = useState(localStorage.getItem("authToken"));

  const navigate = useNavigate();

  useEffect(() => {
    if (!isManual) {
      const interval = setInterval(() => {
        setCurrentSlide((prevSlide) => (prevSlide + 1) % 3);
      }, 3000);

      return () => clearInterval(interval);
    }
  }, [isManual]);

  const handleDotClick = (index) => {
    setCurrentSlide(index);
    setIsManual(true);
    setTimeout(() => setIsManual(false), 5000);
  };

  const handleCreateGame = async () => {
    if (!playerName) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è!");
      return;
    }
  
    try {
      const response = await createRoom(playerName);
  
      if (response.token) {
        setToken(response.token);
        localStorage.setItem("authToken", response.token);
        console.log(response.token);
      }
  
      const roomCode = response.room.roomCode;
      const id = response.player.id;
      const isCreator = id === response.room.creator;
  
      // ‚úÖ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –∑–∞—Ä–∞–Ω–µ–µ
      socket.once("joinedRoom", ({ room, player }) => {
        console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ joinedRoom:", { room, player });
        navigate('/lobby', {
          state: { playerName, roomCode, playerId: id, isCreator, token: response.token }
        });
        
      });
  
      socket.once("error", (message) => {
        alert("‚ùå –û—à–∏–±–∫–∞: " + message);
      });
  
      // üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º joinRoom
      socket.emit("joinRoom", {
        token: response.token,
        roomCode,
        playerId: id,
      });
  
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã");
    }
  };
  
  
  
  
  
  
  const handleJoinGame = async () => {
    if (!playerName || !roomCode) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã!");
      return;
    }
  
    try {
      const response = await joinRoom(roomCode, playerName, token);
      const { id } = response.player;
  
      if (response.token) {
        setToken(response.token);
        localStorage.setItem("authToken", response.token);
      }
  
      socket.emit("joinRoom", { token, roomCode, playerId: id });
  
      socket.once("joinedRoom", ({ room, player }) => {
        navigate('/lobby', { state: { playerName, roomCode, playerId: player.id, isCreator: false, token } });
      });
  
      socket.once("error", (message) => {
        alert(message);
      });
  
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ");
    }
  };
  

  useEffect(() => {
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∏–≥—Ä–æ–∫–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–µ–≥–æ—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É
    socket.on("playerJoined", ({ player }) => {
      console.log(`üîî –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∏–≥—Ä–æ–∫: ${player.name}`);
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    });
  
    return () => {
      socket.off("playerJoined");
    };
  }, []);
  
  
  
  
  

  return (
    <div className="main-screen">
      <div className="logo-container">
        <img src={logo} alt="AImposter Logo" />
        <span className="header-title">AImposter</span>
      </div>

      <div className="content">
        <div className="login-box">
          <div className="avatar-name">
            <div className="avatar-container">
              <img src={avatar} alt="Avatar" />
            </div>
            <input
              type="text"
              className="name-field"
              placeholder="–ò–º—è..."
              value={playerName}
              onChange={(e) => setPlayerName(e.target.value)} // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
            />
          </div>

          <div className="center">
            <div className="room-code-container">
              <div className="combined-button">
                <button className="join-button" onClick={handleJoinGame}>–í–æ–π—Ç–∏</button>
                <div className="input-filed">
                  <input
                    type="text"
                    className="code-field"
                    value={roomCode}
                    onChange={(e) => setRoomCode(e.target.value)} // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã
                    placeholder="–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã"
                  />
                </div>
              </div>
            </div>
          </div>

          <button className="welcome-create-game" onClick={handleCreateGame}>–°–æ–∑–¥–∞—Ç—å –ò–≥—Ä—É</button>
        </div>
        <div className="info-box">
          <div className={`slide ${currentSlide === 0 ? "active" : ""}`}>
            <h3>–ö–ê–ö –ò–ì–†–ê–¢–¨:</h3>
            <p><b>1.</b> –°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –∫ –∫–æ–º–Ω–∞—Ç–µ!</p>
            <p><b>2.</b> <b>–£–∑–Ω–∞–π—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å!</b><br /><span className="info-box-details">–í –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã —É–≤–∏–¥–∏—Ç–µ, –∫—Ç–æ –≤—ã: –∏–≥—Ä–æ–∫ –∏–ª–∏ –º–∞—Ñ–∏—è.</span></p>
          </div>
          <div className={`slide ${currentSlide === 1 ? "active" : ""}`}>
            <h3>–ö–ê–ö –ò–ì–†–ê–¢–¨:</h3>
            <p className="info-box-second-header"><b>3.</b> <b>–î–Ω–µ–≤–Ω–æ–µ –≤–µ—Å–µ–ª—å–µ!</b></p>
            <p className="info-box-second">–î–Ω—ë–º –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –æ–±—â–∞—é—Ç—Å—è –≤ —á–∞—Ç–µ, –∞ –º–∞—Ñ–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ò–ò.</p>
            <p className="info-box-second">–£ –≤–∞—Å –µ—Å—Ç—å <span className="player-role">25 —Å–µ–∫—É–Ω–¥,</span> —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—Å–µ –æ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.</p>
          </div>
          <div className={`slide ${currentSlide === 2 ? "active" : ""}`}>
            <h3>–ö–ê–ö –ò–ì–†–ê–¢–¨:</h3>
            <p className="info-box-third-header"><b>4.</b> –†–∞—É–Ω–¥—ã –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!</p>
            <p className="info-box-second">–ö–∞–∂–¥—ã–π —Ä–∞—É–Ω–¥ –¥–ª–∏—Ç—Å—è <span className="player-role">3 –º–∏–Ω—É—Ç—ã.</span> –í –∫–æ–Ω—Ü–µ —Ä–∞—É–Ω–¥–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∏ –≤—ã–≥–Ω–∞—Ç—å –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.</p>
            <p className="info-box-third-header"><b>5.</b> –ù–æ—á–Ω—ã–µ –∏–Ω—Ç—Ä–∏–≥–∏!</p>
            <p className="info-box-second">–ù–æ—á—å—é –º–∞—Ñ–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç —Å–≤–æ—é –∂–µ—Ä—Ç–≤—É –∑–∞ <span className="player-role">25 —Å–µ–∫—É–Ω–¥.</span></p>
          </div>
          <div className="dots">
            {[0, 1, 2].map((index) => (
              <span
                key={index}
                className={`dot ${currentSlide === index ? "active" : ""}`}
                onClick={() => handleDotClick(index)}
              ></span>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default WelcomeScreen;
