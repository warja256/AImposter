import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import "../header.css";
import "./Lobby.css";
import logo from '../../assets/images/logo.png';
import avatar from "../../assets/images/avatar.png";
import { getRoomDetails, leaveRoom } from '../../api/api';

const LobbyScreen = () => {
  const [roomData, setRoomData] = useState(null); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
  const [playerData, setPlayerData] = useState(null); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  const [playerName, setPlayerName] = useState('');
  const [roomCode, setRoomCode] = useState('');
  const [playerCount, setPlayerCount] = useState(0); // –°—á—ë—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤
  const [playerId, setPlayerId] = useState(null); // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ

  const navigate = useNavigate();
  const location = useLocation(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º useLocation –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

  useEffect(() => {
    if (location.state) {
      const { playerName, roomCode, playerId } = location.state;

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞, –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –∏ playerId
      setPlayerName(playerName);
      setRoomCode(roomCode);
      setPlayerId(playerId); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º playerId
    }
  }, [location.state]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è

  useEffect(() => {
    if (roomCode) {
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–Ω–∞—Ç–µ –∏ –µ—ë —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
      const fetchRoomData = async () => {
        try {
          const response = await getRoomDetails(roomCode);
          setRoomData(response);  // –¢–µ–ø–µ—Ä—å –º—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—é –∫–æ–º–Ω–∞—Ç—É
          setPlayerCount(response.playerCount); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
          setPlayerData(response.Players); 
          setPlayerId(response.playerId);
          setRoomCode(response.roomCode);// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        } catch (error) {
          console.error("Error fetching room details:", error);
        }
      };

      fetchRoomData(); // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      const interval = setInterval(fetchRoomData, 5000); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫

      return () => clearInterval(interval); // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    }
  }, [roomCode]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã

  const handleLeaveRoom = async () => {
    if (roomCode && playerId) {  
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å roomCode –∏ playerId
            const response = await leaveRoom(roomCode, playerId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if (response.status === 200) {
                console.log("Successfully left the room:");
                navigate('/');
            } else {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã:", response);
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã:", error);
        }
    } else {
        console.error("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω roomCode –∏–ª–∏ playerId");
    }
  };

  const handleCopyRoomCode = () => {
    navigator.clipboard.writeText(roomCode)
      .then(() => alert("–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!"))
      .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:", err));
  };

  return (
    <div className="lobby-screen">
      <div className="logo-container">
        <img src={logo} alt="AImposter Logo" />
        <span className="header-title">AImposter</span>
      </div>
      <div>
        <h3 className="lobby-header">–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã</h3>
      </div>
      <div className="lobby">
        <div className="lobby-buttons">
          <div>
            <button className="create-game">–ù–∞—á–∞—Ç—å</button>
          </div>
          <div>
            <div className="center">
              <div className="room-code-container">
                <div className="combined-button">
                  {roomCode && (
                    <div className="code-container">
                      <input 
                        type="text" 
                        className="code-field" 
                        value={roomCode} 
                        readOnly
                      />
                      <button className="copy-button" onClick={handleCopyRoomCode}>
                        üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                      </button>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
          <div>
            
              <button className="create-game go-back" onClick={handleLeaveRoom}>–ù–∞–∑–∞–¥</button>
            
          </div>
        </div>
        <div className="lobby-users">
          <h3>–£–ß–ê–°–¢–ù–ò–ö–ò {playerCount}/4</h3>
          {playerData ? (
            playerData.map((player, index) => (
              <button key={index} className="player-button">
                <img src={avatar} className="avatar" alt={`–ò–≥—Ä–æ–∫ ${index + 1}`} />
                <div className="text">{player.name}</div> {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞ */}
              </button>
            ))
          ) : (
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default LobbyScreen;
